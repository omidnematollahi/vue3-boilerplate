@use './typography' as *;
@use './breakpoints' as *;
@use './elevation' as *;
@use './variables' as *;

@mixin media-query($screen-size) {
  $size: map-get($breakpoints, $screen-size);

  @if $size {
    // Desktop first approach
    // TODO: Implement configurable approach
    @media only screen and (max-width: $size) {
      @content;
    }
  }
}

@mixin typography($name) {
  $target: map-get($typography, default);
  $level: map-get($target, $name);

  font-size: map-get($level, font-size);
  font-weight: map-get($level, font-weight);
  line-height: map-get($level, line-height);
  letter-spacing: map-get($level, letter-spacing);

  @each $point, $value in $breakpoints {
    $target: map-get($typography, $point);

    @if $target {
      @include media-query($point) {
        $level: map-get($target, $name);

        @if $level {
          font-size: map-get($level, font-size);
          font-weight: map-get($level, font-weight);
          line-height: map-get($level, line-height);
          letter-spacing: map-get($level, letter-spacing);
        }
      }
    }
  }
}

@mixin flex(
  $dir: row,
  $wrap: nowrap,
  $align: flex-start,
  $justify: flex-start
) {
  display: flex;
  flex-direction: $dir;
  flex-wrap: $wrap;
  align-items: $align;
  justify-content: $justify;
}

@mixin shadow-elevation(
  $level,
  $base-color: map-get($elevation-base-color, light)
) {
  @if ($level == 0) {
    box-shadow: none;
  } @else {
    $umbra: rgba($base-color, 0.2);
    $penumbra: rgba($base-color, 0.14);
    $ambient: rgba($base-color, 0.12);

    box-shadow: map-get($light-elevation-umbra-map, $level) $umbra,
      map-get($light-elevation-penumbra-map, $level) $penumbra,
      map-get($light-elevation-ambient-map, $level) $ambient;
  }
}

@mixin elevation(
  $level: 1,
  $base-light-color: map-get($elevation-base-color, light),
  $base-dark-color: map-get($elevation-base-color, dark)
) {
  @at-root [data-theme='light'] & {
    @include shadow-elevation($level, $base-light-color);
  }

  @at-root [data-theme='dark'] & {
    @include shadow-elevation($level, $base-dark-color);
  }
}

@mixin transition($easing-token: standard) {
  @content;
  transition-duration: map-get($easing-duration-pair, $easing-token);
  transition-timing-function: map-get($easing, $easing-token);
}
